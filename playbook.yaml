---
# List of plays
-
  # Hosts: where our play will run and options it will run with
  hosts: localhost
  connection: local
  gather_facts: yes
  tags: always

  # Vars: variables that will apply to the play, on all targets 

  # Tasks: the list of tasks that will be executed within 
  #        the play, this section can also be used for 
  #        pre and post tasks
  tasks:
    # from https://superuser.com/questions/1395954/ansible-playbook-to-determine-os-release
  - name: System details
    debug: msg="{{ item }}"
    with_items: 
    - "{{ ansible_distribution }}"
    - "{{ ansible_distribution_version }}"
    - "{{ ansible_distribution_major_version }}"
  - name: Verify install_files is present
    debug: msg="install_files/_README = {{ lookup('file', '/home/kasm-default-profile/install_files/_README') }}"
    # Detect if we are running on a WSL2 environment
  - name: Set wsl2_environment fact default to false
    set_fact:
      wsl2_environment: false
  - name: Set wsl2_environment fact True
    set_fact:
      wsl2_environment: true
    when: ansible_kernel is search("microsoft-standard-WSL2")
  # fix for .gnupg/ permissions when building custom images
  - name: Add fix for .gnupg/ permissions
    lineinfile:
      path: "/etc/bash.bashrc"
      line: "chmod 700 ~/.gnupg/"    
  - name: Add custom prompt to /etc/skel/.profile
    lineinfile:
      path: "/etc/skel/.profile"
      line: 'export PS1="\[\033[00;32m\][\w]\$\[\033[00m\] "'

  # Handlers: the list of handlers that are executed as a notify 
  #           key from a task

  # Roles: list of roles to be imported into the play
  roles:
  - role: irixjp.role_example_hello

# Add additional plays here (remember the list entry -)
# Be sure to use the same hosts and connection entries above
# addtional plays

-
  # Install gs-avr-toolchain
  hosts: localhost
  connection: local
  tags: install_gs_avr_toolchain

  tasks:
  - name: Install gs avr32 dependencies
    apt:
      name: libmpfr-dev
      update_cache: yes
  - name: Create symbolic link for libmpfr.so.4
    shell: ln -srv /usr/lib/x86_64-linux-gnu/libmpfr.so.6 /usr/lib/x86_64-linux-gnu/libmpfr.so.4
  - name: Install gs-avr-toolchain
    shell:
      cmd: /home/kasm-default-profile/install_files/avr_toolchain/gs-avr32-toolchain-3.4.2_gs1/install-avr32.sh
      chdir: /home/kasm-default-profile/install_files/avr_toolchain/gs-avr32-toolchain-3.4.2_gs1/
      executable: /bin/bash
  - name: Add /usr/local/avr32/bin to PATH
    shell: echo 'export PATH="/usr/local/avr32/bin:$PATH"' >> /home/kasm-default-profile/.bashrc

-
  # Install PharoLauncher
  hosts: localhost
  connection: local
  tags: install_pharolauncher

  tasks:
  - name: Unzip Pharo (v3.0.1) for 64-bit Linux
    unarchive:
      src: /home/kasm-default-profile/install_files/PharoLauncher-linux-3.0.1-x64.zip
      dest: /home/kasm-default-profile/
      remote_src: yes
  - name: Create local application folder for PharoLauncher
    shell: mkdir -p /home/kasm-default-profile/.local/share/applications/
  - name: Configure PharoLauncher desktop shortcut
    shell: echo "[Desktop Entry]\nName=Pharo\nGenericName=Pharo\nExec=/home/kasm-user/pharolauncher/pharo-launcher\nIcon=/home/kasm-user/pharolauncher/icons/pharo-launcher.png\nTerminal=false\nType=Application\nStartupNotify=false\nCategories=Application;Development;" > ~/.local/share/applications/pharo.desktop

-
  # install GMAT
  hosts: localhost
  connection: local
  tags: install_gmat

  tasks:
  - name: Install GMAT dependencies with Apt
    apt:
      name: libopengl0, libpython3.6-dev
      update_cache: yes
  - name: Join parts of GMAT tarball
    shell: cat /home/kasm-default-profile/install_files/gmat-ubuntu-x64-R2020a.tar.gz.part* > /home/kasm-default-profile/gmat-ubuntu-x64-R2020a.tar.gz
  - name: Extract GMAT tarball to /opt
    unarchive:
      src: /home/kasm-default-profile/gmat-ubuntu-x64-R2020a.tar.gz
      dest: /opt
      remote_src: yes
      creates: /opt/GMAT/R2020a/README.txt
  - name: Delete GMAT tarball
    shell: rm /home/kasm-default-profile/gmat-ubuntu-x64-R2020a.tar.gz

-
  # install Octave
  hosts: localhost
  connection: local
  tasks:
  - name: Install Octave with Apt
    apt:
      name: octave
      update_cache: yes
  - name: Install octave-doc with Apt
    apt:
      name: octave-doc
      update_cache: yes
  - name: Install octave-info with Apt
    apt:
      name: octave-info
      update_cache: yes
  - name: Install octave-htmldoc with Apt
    apt:
      name: octave-htmldoc
      update_cache: yes
  - name: Install liboctave-dev with Apt
    apt:
      name: liboctave-dev
      update_cache: yes
  - name: Install octave-control with Apt
    apt:
      name: octave-control
      update_cache: yes
  - name: Install octave-image with Apt
    apt:
      name: octave-image
      update_cache: yes
  - name: Install octave-io with Apt
    apt:
      name: octave-io
      update_cache: yes
  - name: Install octave-optim with Apt
    apt:
      name: octave-optim
      update_cache: yes
  - name: Install octave-signal with Apt
    apt:
      name: octave-signal
      update_cache: yes
  - name: Install octave-statistics with Apt
    apt:
      name: octave-statistics
      update_cache: yes

-
  # install Minicom from debian package
  hosts: localhost
  connection: local
  tags: install_minicom

  tasks:
  - name: Install Minicom debian package from install_files
    shell: dpkg -i /home/kasm-default-profile/install_files/minicom_2.7.1-1.1_amd64.deb
  - name: Add USER to dialout group
    user:
      name: default
      shell: /bin/bash
      groups: "dialout"
      state: present
      remove: yes

-
  # Configure pulseaudio
  hosts: localhost
  connection: local
  tasks:
  - name: Apt install pulseaudio-utils with Apt
    apt:
      name: pulseaudio-utils
      update_cache: yes
  - name: Set up user attributes in /etc/passwd
    shell: echo "default:x:1000:1000:default User,,,:/home/default:/bin/bash" >> /etc/passwd
  - name: Connect to the host's server using the mounted UNIX socket
    shell: echo "default-server = unix:/run/user/1000/pulse/native" >> /etc/pulse/client.conf
  - name: Prevent the use of shared memory
    shell: echo "enable-shm = false" >> /etc/pulse/client.conf

-
  # install OpenJDK 11
  hosts: localhost
  connection: local
  tags: install_openjdk

  tasks:
  - name: Rejoin files for OpenJDK 11 tarball
    shell: cat /home/kasm-default-profile/install_files/openjdk-11+28_linux-x64_bin.tar.gz.part* > /home/kasm-default-profile/openjdk-11+28_linux-x64_bin.tar.gz
  - name: Extract OpenJDK 11 tarball to /opt
    unarchive:
      src: /home/kasm-default-profile/openjdk-11+28_linux-x64_bin.tar.gz
      dest: /opt
      remote_src: yes
      creates: /opt/jdk-11/release
  - name: Delete OpenJDK 11 tarball
    shell: rm /home/kasm-default-profile/openjdk-11+28_linux-x64_bin.tar.gz
  - name: Update alternatives so the command, java, points to installed jdk
    shell: update-alternatives --install /usr/bin/java java /opt/jdk-11/bin/java 100
  - name: Update alternatives so the command, javac, points to installed jdk
    shell: update-alternatives --install /usr/bin/javac javac /opt/jdk-11/bin/javac 100

-
  # install Eclipse
  hosts: localhost
  connection: local
  tasks:
  - name: Download Eclipse IDE for Embedded C/C++ (2019-03 release) tarball
    shell: wget https://www.eclipse.org/downloads/download.php?file=/technology/epp/downloads/release/2019-03/R/eclipse-cpp-2019-03-R-linux-gtk-x86_64.tar.gz -O /home/kasm-default-profile/eclipse-cpp-2019-03-R-linux-gtk-x86_64.tar.gz
  - name: Unarchive Eclipse IDE for Embedded C/C++ (2019-03 release) tarball
    unarchive:
      src: /home/kasm-default-profile/eclipse-cpp-2019-03-R-linux-gtk-x86_64.tar.gz
      dest: /home/kasm-default-profile/
      remote_src: yes
  - name: Delete Eclipse IDE for Embedded C/C++ (2019-03 release) tarball
    shell: rm /home/kasm-default-profile/eclipse-cpp-2019-03-R-linux-gtk-x86_64.tar.gz
  - name: Create directory for eclipse/jre/
    shell: mkdir /home/kasm-default-profile/eclipse/jre/
  - name: Create directory for eclipse/jre/bin/
    shell: mkdir /home/kasm-default-profile/eclipse/jre/bin/
  - name: Create symlink to java binary
    shell: ln -sv /opt/jdk-11/bin/java /home/kasm-default-profile/eclipse/jre/bin/java
  - name: Export $HOME/eclipse/ to PATH
    shell: echo 'export PATH="$HOME/eclipse/:$PATH"' >> /home/kasm-default-profile/.bashrc

-
  # install chrome
  hosts: localhost
  connection: local
  gather_facts: yes

  roles:
    - role: webarchitect609.google_chrome

-
  # install keychain, git, and @capsulecorplab .vimrc and .gitconfig
  hosts: localhost
  connection: local
  gather_facts: yes
  tags: install_utilities

  vars:
    git_version: "2.36.1"
    git_version_to_install: "1:{{ git_version }}-0ppa1~ubuntu20.04.1"
    keychain_version: "2.8.5"
    keychain_version_to_install: "{{ keychain_version }}-1"
    keychain_version_expected: "{{ keychain_version }}.."

  tasks:
  - name: Install dh-autoreconf
    apt:
      name: dh-autoreconf
      update_cache: yes
  - name: Install libcurl4-gnutls-dev
    apt:
      name: libcurl4-gnutls-dev
      update_cache: yes
  - name: Install libexpat1-dev
    apt:
      name: libexpat1-dev
      update_cache: yes
  - name: Install gettext
    apt:
      name: gettext
      update_cache: yes
  - name: Install libz-dev
    apt:
      name: libz-dev
      update_cache: yes
  - name: Install libssl-dev
    apt:
      name: libssl-dev
      update_cache: yes
  - name: Install install-info
    apt:
      name: install-info
      update_cache: yes
  - name: Download git (v2.36.1) tarball
    shell: wget https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.36.1.tar.gz -O /home/kasm-default-profile/git-2.36.1.tar.gz
  - name: Extract git source files
    unarchive:
      src: /home/kasm-default-profile/git-2.36.1.tar.gz
      dest: /home/kasm-default-profile/
      remote_src: yes
      creates: /home/kasm-default-profile/git-2.36.1/README.md
  - name: Delete git tarball
    shell: rm /home/kasm-default-profile/git-2.36.1.tar.gz
  - name: Build git
    shell:
      cmd: make configure && ./configure --prefix=/usr && make > /tmp/git_build_output.txt 2>&1 && make install
      chdir: /home/kasm-default-profile/git-2.36.1
      executable: /bin/bash
  - name: Delete git source files
    shell: rm -rf /home/kasm-default-profile/git-2.36.1
  - name: Install Keychain
    apt:
      name: "keychain={{ keychain_version_to_install }}"
      update_cache: yes
  - name: Get git version
    shell: git version | sed 's/[[:alpha:]|(|[:space:]]//g'
    register: installed_git_version
  - name: Get keychain version
    shell: 
      cmd: keychain -V 2> >(grep -i keychain) 2> >(sed 's/[[:alpha:]|(|[:space:]]//g') | fgrep '*' | sed 's/[*~://]//g'
      executable: /bin/bash
    register: installed_keychain_version
  - name: Display git and keychain versions
    debug:
      msg: "git = {{ installed_git_version.stdout }} | keychain = {{ installed_keychain_version.stdout }}"
  - name: Test git version
    fail:
      msg: "Git Version Error: Expected {{ git_version }} | Found {{ installed_git_version.stdout }}"
    when: installed_git_version.stdout != git_version  
  - name: Test keychain version
    fail:
      msg: "Keychain Version Error: Expected {{ keychain_version_expected }} | Found {{ installed_keychain_version.stdout }}"
    when: installed_keychain_version.stdout != keychain_version_expected
  - name: Install @capsulecorplab .vimrc
    get_url:
      url: https://gist.githubusercontent.com/capsulecorplab/495058e7a57ed8adaed3c40c80d09739/raw/4a6e6f6ff92b96919be111c9cbb5a4a21ab472d2/.vimrc
      dest: /home/kasm-default-profile/
  - name: Install @capsulecorplab .gitconfig
    get_url:
      url: https://gist.githubusercontent.com/capsulecorplab/401ba2fe0857a328f2a626adbf078cc6/raw/b89a6234f0d620ff60bcfe37f95de197b8772377/.gitconfig
      dest: /home/kasm-default-profile/

-
  # install Python packages with pip
  hosts: localhost
  connection: local
  gather_facts: yes
  tags:
    - install_python_packages
    - install_avr_build_tools
    - install_gs_avr_toolchain

  tasks:
  - name: Update OS to point python to python3
    apt:
      name: python-is-python3
      update_cache: yes
  - name: Install pip for python3 with Apt
    apt:
      name: python3-pip
      update_cache: yes
  - name: Install python packages with pip
    pip:
      name:
        - jupyterlab
        - notebook
        - voila
        - pint
        - setuptools
        - bikeshed
        - rdflib==6.2.0
        - linkml==1.3.8
  - name: Install fprime (v3.1.1) python packages & dependencies
    pip:
      requirements: https://raw.githubusercontent.com/nasa/fprime/v3.1.1/requirements.txt

-
  # install Git LFS
  hosts: localhost
  connection: local
  tasks:
  - name: Download Git LFS
    shell: wget https://github.com/git-lfs/git-lfs/releases/download/v3.1.2/git-lfs-linux-amd64-v3.1.2.tar.gz
  - name: Create directory for extracting Git LFS tarball
    shell: mkdir git-lfs-linux-amd64-v3.1.2
  - name: Extract Git LFS file contents
    shell: tar -xvf git-lfs-linux-amd64-v3.1.2.tar.gz -C git-lfs-linux-amd64-v3.1.2
  - name: Delete Git LFS tarball
    shell: rm git-lfs-linux-amd64-v3.1.2.tar.gz
  - name: Install Git LFS
    shell: ./git-lfs-linux-amd64-v3.1.2/install.sh
  - name: Delete Git LFS tarball directory
    shell: rm -rf git-lfs-linux-amd64-v3.1.2

-
  # install Cross-compile toolchain for embedded Linux target
  hosts: localhost
  connection: local
  gather_facts: yes
  tags:
    - install_cross_compile_toolchain
    - install_avr_build_tools
    - install_gs_avr_toolchain
  tasks:
  - name: Install gcc-arm-linux-gnueabihf with Apt
    apt:
      name: gcc-arm-linux-gnueabihf
      update_cache: yes
  - name: Install g++-arm-linux-gnueabihf with Apt
    apt:
      name: g++-arm-linux-gnueabihf
      update_cache: yes
  - name: Install gdb-multiarch with Apt
    apt:
      name: gdb-multiarch
      update_cache: yes
  - name: Install libssl-dev
    apt:
      name: libssl-dev
      update_cache: yes
  - name: Install build-essential with Apt
    apt:
      name: build-essential
      update_cache: yes
  - name: Download cmake tarball
    shell: wget http://www.cmake.org/files/v3.23/cmake-3.23.1.tar.gz -O /home/kasm-default-profile/cmake-3.23.1.tar.gz
  - name: Extract cmake source files
    unarchive:
      src: /home/kasm-default-profile/cmake-3.23.1.tar.gz
      dest: /home/kasm-default-profile/
      remote_src: yes
      creates: /home/kasm-default-profile/cmake-3.23.1/README
  - name: Delete cmake tarball
    shell: rm /home/kasm-default-profile/cmake-3.23.1.tar.gz
  - name: Build cmake
    shell:
      cmd: ./configure && make > /tmp/cmake_build_output.txt 2>&1 && make install
      chdir: /home/kasm-default-profile/cmake-3.23.1/
      executable: /bin/bash
  - name: Delete cmake source files
    shell: rm -rf /home/kasm-default-profile/cmake-3.23.1/

-
  # Install doctools
  hosts: localhost
  connection: local
  tags: install_doctools

  tasks:
  - name: Download ruby v3.1.2 source tarball
    shell: wget https://cache.ruby-lang.org/pub/ruby/3.1/ruby-3.1.2.tar.gz -O /home/kasm-default-profile/ruby-3.1.2.tar.gz
  - name: Extract ruby source tarball
    unarchive:
      src: /home/kasm-default-profile/ruby-3.1.2.tar.gz
      dest: /home/kasm-default-profile
      remote_src: yes
      creates: /home/kasm-default-profile/ruby-3.1.2
  - name: Delete ruby source tarball
    shell: rm -rf /home/kasm-default-profile/ruby-3.1.2.tar.gz
  - name: Build ruby
    shell:
      cmd: make configure && ./configure --prefix=/usr && make > /tmp/ruby_build_output.txt 2>&1 && make install
      chdir: /home/kasm-default-profile/ruby-3.1.2
      executable: /bin/bash
  - name: Delete ruby source files
    shell: rm -rf /home/kasm-default-profile/ruby-3.1.2
  - name: Download jabref deb
    shell: wget https://github.com/JabRef/jabref/releases/download/v5.6/jabref_5.6-1_amd64.deb -O /home/kasm-default-profile/jabref_5.6-1_amd64.deb
  - name: install jabref
    apt:
      deb: /home/kasm-default-profile/jabref_5.6-1_amd64.deb
      update_cache: yes
  - name: Delete jabref deb
    shell: rm /home/kasm-default-profile/jabref_5.6-1_amd64.deb
  - name: install zlib with Apt
    apt:
      name: zlib1g-dev
      update_cache: yes
  - name: install asciidoctor-bibtex as ruby gem
    shell: gem install asciidoctor-bibtex
  - name: install asciidoctor-diagram as ruby gem
    shell: gem install asciidoctor-diagram
  - name: install asciidoctor-pdf as ruby gem
    shell: gem install asciidoctor-pdf

-
  # install GPredict
  hosts: localhost
  connection: local
  tasks:
  - name: Install libtool
    apt:
      name: libtool
      update_cache: yes
  - name: Install intltool
    apt:
      name: intltool
      update_cache: yes
  - name: Install autoconf
    apt:
      name: autoconf
      update_cache: yes
  - name: Install automake
    apt:
      name: automake
      update_cache: yes
  - name: Install libcurl4-openssl-dev
    apt:
      name: libcurl4-openssl-dev
      update_cache: yes
  - name: Install pkg-config
    apt:
      name: pkg-config
      update_cache: yes
  - name: Install libglib2.0-dev
    apt:
      name: libglib2.0-dev
      update_cache: yes
  - name: Install libgtk-3-dev
    apt:
      name: libgtk-3-dev
      update_cache: yes
  - name: Install libgoocanvas-2.0-dev
    apt:
      name: libgoocanvas-2.0-dev
      update_cache: yes
  - name: Download GPredict tarball
    shell: wget https://github.com/csete/gpredict/releases/download/v2.2.1/gpredict-2.2.1.tar.bz2 -O /home/kasm-default-profile/gpredict-2.2.1.tar.bz2
  - name: Extract GPredict source files
    unarchive:
      src: /home/kasm-default-profile/gpredict-2.2.1.tar.bz2
      dest: /home/kasm-default-profile/
      remote_src: yes
      creates: /home/kasm-default-profile/gpredict-2.2.1/README
  - name: Delete GPredict tarball
    shell: rm /home/kasm-default-profile/gpredict-2.2.1.tar.bz2
  - name: Build GPredict
    shell:
      cmd: ./configure && make > /tmp/gpredict_build_output.txt 2>&1 && make install
      chdir: /home/kasm-default-profile/gpredict-2.2.1/
      executable: /bin/bash
  - name: Delete GPredict source files
    shell: rm -rf /home/kasm-default-profile/gpredict-2.2.1/

-
  # install GNU Radio Software with Apt
  hosts: localhost
  connection: local
  tasks:
  - name: Add PPA repository for GNU Radio v3.8
    shell: add-apt-repository ppa:gnuradio/gnuradio-releases-3.8
  - name: Apt install GNU Radio v3.8 with Apt
    apt:
      name: gnuradio
      update_cache: yes

- 
  # install sudo for the vs-code role below 
  hosts: localhost
  connection: local
  tasks:
  - name: Install Sudo
    apt:
      name: sudo
      update_cache: yes
  - name: Preserve DONT_PROMPT_WSL_INSTALL in sudoers
    lineinfile:
      path: "/etc/sudoers"
      line: "Defaults        env_keep += \"DONT_PROMPT_WSL_INSTALL\""
    when: wsl2_environment

-
# add dev user to give vs code somewhere to install extensions
  hosts: localhost
  connection: local
  tasks:
  - name: Add dev user
    user:
      name: dev
      uid: 1001

-
  # install the remainder of the tools
  hosts: localhost
  connection: local
  environment: 
    DONT_PROMPT_WSL_INSTALL: 1
  roles:
    - role: gantsign.visual-studio-code
      users:
        - username: "dev"
          visual_studio_code_extensions:
            - ms-python.python
          visual_studio_code_settings_overwrite: yes
          visual_studio_code_settings: {
            "extensions.ignoreRecommendations": true,
            "update.mode": "none",
            "extensions.autoUpdate": false,
            "extensions.autoCheckUpdates": false,
            "terminal.integrated.profiles.linux": {
              "bash (login)": {
                "path": "bash",
                "args": ["-l"]
                }
              },
            "terminal.integrated.defaultProfile.linux": "bash (login)" 
          }  

-
  # Copy VS Code changes to kasm-default-profile and lean up (remove) dev user now that vs code is installed
  hosts: localhost
  connection: local
  tasks:
  - name: Copy VS Code changes to kasm-default-profile
    shell: 
      cmd: cp -r /home/dev/.config/Code/ /home/kasm-default-profile/.config/Code/ && cp -r /home/dev/.vscode/ /home/kasm-default-profile/.vscode/
  - name: Remove dev user
    user:
      name: dev
      state: absent
      remove: yes 

# Three dots indicate the end of a YAML document
...
